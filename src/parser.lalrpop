use crate::token::*;
use either_n::*;

grammar();

ImmFlag: ImmFlag = {
  r"(?i)::i64" => ImmFlag::SingleImmediate(Width::W64),
  r"(?i)::i32" => ImmFlag::SingleImmediate(Width::W32),
  r"(?i)::i16" => ImmFlag::SingleImmediate(Width::W16),
  r"(?i)::i8" => ImmFlag::SingleImmediate(Width::W8),

  r"(?i)::n64" => ImmFlag::DoubleImmediate(Width::W64),
  r"(?i)::n32" => ImmFlag::DoubleImmediate(Width::W32),
  r"(?i)::n16" => ImmFlag::DoubleImmediate(Width::W16),
  r"(?i)::n8" => ImmFlag::DoubleImmediate(Width::W8),
}

OpCode: OpCode = {
  r"(?i)mov" => OpCode::Mov(ImmFlag::NoImmediate),
  r"(?i)mov" <flag:ImmFlag> => OpCode::Mov(flag),
  r"(?i)jmp::eq" => OpCode::JmpEq(ImmFlag::NoImmediate),
  r"(?i)jmp::eq" <flag:ImmFlag> => OpCode::JmpEq(flag),
}

Register: Register = {
  r"(?i)r0" => Register::R0,
  r"(?i)r1" => Register::R1,
  r"(?i)r2" => Register::R2,
  r"(?i)r3" => Register::R3,
  r"(?i)r4" => Register::R4,
  r"(?i)r5" => Register::R5,
  r"(?i)r6" => Register::R6,
  r"(?i)r7" => Register::R7,
  r"(?i)r8" => Register::R8,
  r"(?i)r9" => Register::R9,
  r"(?i)r10" => Register::R10,
  r"(?i)r11" => Register::R11,
  r"(?i)r12" => Register::R12,
  r"(?i)r13" => Register::R13,
  r"(?i)r14" => Register::R14,
  r"(?i)r15" => Register::R15,
}

IntLiteral: IntLiteral = {
  r"(?i)0x[0-9A-F]+" => IntLiteral::from(isize::from_str_radix(<>.trim_start_matches("0x").trim_start_matches("0X"), 16).unwrap()),
  r"(?i)0b[0-1]+" => IntLiteral::from(isize::from_str_radix(<>.trim_start_matches("0b").trim_start_matches("0B"), 2).unwrap()),
  r"(?i)[0-9]+" => IntLiteral::from(isize::from_str_radix(<>, 10).unwrap()),
}

Constant: Constant = {
  r"@(?i)[a-z0-9_\-]+" => Constant { name: <>.to_string() }
}

pub Label: Label = {
  r"(?i)[a-z0-9_\-]+@" => Label { name: <>.trim_end_matches("@").to_string(), replace_with: "0".to_string() },
  r"(?i)#define" <name:r"<(?i)[a-z0-9_\-]+>"> <replacement:r"<(?i)[a-z0-9_\-]+>"> => {
    Label {
      name: name.trim_start_matches("<").trim_end_matches(">").to_string(),
      replace_with: replacement.trim_start_matches("<").trim_end_matches(">").to_string()
    }

  }
}

ArgIn: Option<Either3<Constant, Register, IntLiteral>> = {
  Register => Some(Either3::Two(<>)),
  IntLiteral => Some(Either3::One(<>)),
  Constant => Some(Either3::Three(<>))
}

ArgOut: Option<Register> = {
  Register => Some(<>)
}

pub Instruction: Instruction = {
  <opcode:OpCode> <arg_left:ArgIn> "," <arg_right:ArgIn> "->" <arg_out:ArgOut> => {
    Instruction {
      opcode: opcode,
      arg_left: arg_left,
      arg_right: arg_right,
      arg_out: arg_out,
    }
  },

  <opcode:OpCode> <arg_left:ArgIn> "->" <arg_out:ArgOut> => {
    Instruction {
      opcode: opcode,
      arg_left: arg_left,
      arg_right: None,
      arg_out: arg_out,
    }
  },

  <opcode:OpCode> "->" <arg_out:ArgOut> => {
    Instruction {
      opcode: opcode,
      arg_left: None,
      arg_right: None,
      arg_out: arg_out,
    }
  },

  <opcode:OpCode> => {
    Instruction {
      opcode: opcode,
      arg_left: None,
      arg_right: None,
      arg_out: None,
    }
  },
}